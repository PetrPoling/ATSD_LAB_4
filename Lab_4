#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

using namespace std;

class Edge {
public:
    int from, to, weight;
    Edge(int f, int t, int w) : from(f), to(t), weight(w) {}
    bool operator<(const Edge& other) const {
        return weight < other.weight;
    }
};

class GraphWeighted {
public:
    GraphWeighted(int n) : numNodes(n) {}

    void addEdge(int from, int to, int weight) {
        edges.push_back(Edge(from, to, weight));
    }

    void printGraph() {
        for (auto edge : edges) {
            cout << edge.from << " " << edge.to << " " << edge.weight << endl;
        }
    }

    vector<Edge> Kruskal() {
        vector<Edge> result;
        sort(edges.begin(), edges.end());

        vector<int> parent(numNodes);
        for (int i = 0; i < numNodes; i++) {
            parent[i] = i;
        }

        for (auto edge : edges) {
            int root1 = find(parent, edge.from);
            int root2 = find(parent, edge.to);

            if (root1 != root2) {
                result.push_back(edge);
                parent[root1] = root2;
            }
        }

        return result;
    }

    vector<int> Dijkstra(int startNode) {
        vector<int> dist(numNodes, INT_MAX);
        dist[startNode] = 0;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, startNode});

        while (!pq.empty()) {
            int node = pq.top().second;
            int distance = pq.top().first;
            pq.pop();

            if (distance > dist[node]) {
                continue;
            }

            for (auto edge : edges) {
                if (edge.from == node) {
                    int nextDist = distance + edge.weight;
                    if (nextDist < dist[edge.to]) {
                        dist[edge.to] = nextDist;
                        pq.push({nextDist, edge.to});
                    }
                }
            }
        }

        return dist;
    }

private:
    int numNodes;
    vector<Edge> edges;

    int find(vector<int>& parent, int node) {
        if (parent[node] != node) {
            parent[node] = find(parent, parent[node]);
        }
        return parent[node];
    }
};

int main() {
    int numNodes, numEdges;
    cout << "Enter the number of nodes and edges: ";
    cin >> numNodes >> numEdges;

    GraphWeighted graph(numNodes);

    for (int i = 0; i < numEdges; i++) {
        int from, to, weight;
        cout << "Enter edge " << i + 1 << " (from to weight): ";
        cin >> from >> to >> weight;
        graph.addEdge(from, to, weight);
    }

    cout << "Input graph:" << endl;
    graph.printGraph();

    vector<Edge> mst = graph.Kruskal();
    cout << "MST using Kruskal's algorithm:" << endl;
    for (auto edge : mst) {
        cout << edge.from << " " << edge.to << " " << edge.weight << endl;
    }

    int startNode;
    cout << "Enter the starting node for Dijkstra's algorithm: ";
    cin >> startNode;

    vector<int> shortestPaths = graph.Dijkstra(startNode);
    cout << "Shortest paths tree using Dijkstra's algorithm (rooted at node " << startNode << "):" << endl;
for (int i = 0; i < numNodes; i++) {
cout << startNode << " -> " << i << " : " << shortestPaths[i] << endl;
}
return 0;
}
